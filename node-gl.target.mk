# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := node-gl
DEFS_Default := '-DBUILD_GL_BINDINGS=1' \
	'-DBUILD_GLES_BINDINGS=1' \
	'-DBUILD_GLU_BINDINGS=1' \
	'-DBUILD_GLUT_BINDINGS=1' \
	'-DPLATFORM="mac"' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64'

# Flags passed to all source files.
CFLAGS_Default := -fasm-blocks \
	-mpascal-strings \
	-Os \
	-gdwarf-2 \
	-arch i386

# Flags passed to only C files.
CFLAGS_C_Default := 

# Flags passed to only C++ files.
CFLAGS_CC_Default := 

# Flags passed to only ObjC files.
CFLAGS_OBJC_Default := 

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Default := 

INCS_Default := -Iinclude \
	-I/Users/paddy/data/work/dev/nodejs-0.6/node/src \
	-I/Users/paddy/data/work/dev/nodejs-0.6/node/deps/v8/include \
	-I/Users/paddy/data/work/dev/nodejs-0.6/node/deps/uv/include

OBJS := $(obj).target/$(TARGET)/node-gl.o \
	$(obj).target/$(TARGET)/glbindings/glbind.o \
	$(obj).target/$(TARGET)/glesbindings/glesbind.o \
	$(obj).target/$(TARGET)/glubindings/glubind.o \
	$(obj).target/$(TARGET)/glutbindings/glutbind.o \
	$(obj).target/$(TARGET)/imageloader.o \
	$(obj).target/$(TARGET)/utils.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Default := -undefined dynamic_lookup \
	-framework OpenGL \
	-framework GLUT \
	-arch i386 \
	-L$(builddir)

LIBS := -undefined dynamic_lookup

$(builddir)/node-gl.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/node-gl.node: LIBS := $(LIBS)
$(builddir)/node-gl.node: TOOLSET := $(TOOLSET)
$(builddir)/node-gl.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/node-gl.node
# Add target alias
.PHONY: node-gl
node-gl: $(builddir)/node-gl.node

# Short alias for building this executable.
.PHONY: node-gl.node
node-gl.node: $(builddir)/node-gl.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/node-gl.node

